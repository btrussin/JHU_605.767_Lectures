--2-- File 36
This video discusses bounding volumes.

--3a-- File 39
Many advanced techniques require us to determine intersections of various geometric objects. Since we deal mostly with mesh objects in computer graphics, it would be too expensive to determine the intersections of hundreds or thousands of small triangles. An easy solution to this is to enclose complex geometric objects in simpler geometric objects called bounding volumes. 

We will be focusing on three different types of bounding volumes: spheres, axis-aligned bounding boxes, and oriented bounding boxes.   There are more bounding volume types such as convex hulls, capsules, discrete oriented polytopes, and so forth but these three will be sufficient for our purposes.

--3b-- File 40
The main considerations for bounding volumes are their ease to compute, how tightly they fit the enclosed geometry, and the efficiency of the intersection tests. 

Tightly binding enclosed geometry is probably the most important consideration for our ray tracing project, as we want to eliminate false-positive tests. A ray may intersect the bounding volume, but not the enclosed geometry.

Spheres are easy to compute and very easy to test but often do not tightly enclose the geometry.

Axis-aligned bonding boxes also are easy to compute and test but like the spheres often do not tightly enclose the geometry. AABBs have other limitations as well, as we will see.

Oriented bounding boxes often form the tightest fit of the three but are more difficult to compute and test.

--4-- File 41
Axis aligned bounding boxes, or AABBs form a rectangular box around the geometry. It can be expressed as a minimum and maximum X, Y, and Z values or simply a minimum point and a maximum point.

Computation is efficient because all you have to do is iterate over the vertices of the geometry and determine the minimum and maximum x, y and z values

AABBs work well for static objects but do not work well for objects that will be dynamically rotated as the box will need to be re-calculated for each rotation.

--5-- File 42
Oriented bounding boxes, or OBBs, usually form a much tighter fit then an axis aligned bounding box but are much more complex.  

Here we need to keep track of the center of the box, the orientation expressed as three vectors, and the dimension of the box along each one of those vectors.

I have seen various ways to do this but the most common is as you see on the slide: a center point, three vectors, one along each dimension, and a half length along each one of those vectors.

We will discuss how to compute an OBB in a few slides.

--6-- File 45
There are several proposed methods for forming a bounding sphere. The most difficult part of this is to find the optimal center, then finding the radius is trivial.

Perhaps the easiest and most obvious method is to derive the sphere from an axis aligned bounding box. The center is just the average of the two extreme points, with the radius as half the diagonal. However it is easy to find examples that do not produce optimal results. For example, think of a diamond-like object with vertices that are not near the minimum and maximum points. 

This method can be improved by ignoring the diagonal radius and performing a second pass using the AABB center and the vertex farthest from the center becomes the radius.

Another method is to take the average of the vertices positions and use that as the center.  Again, the vertex farthest from the center becomes the radius.

Remember it is always best to use squared distances where possible to avoid the expensive square root calculations.

--7-- File 46
A near optimal method proposed by Ritter is relatively easy to implement. It requires two passes.

In the first pass you find six extreme vertices: the minimum and maximum X, Y, and Z vertices. Then take the vertex pair from the six with the largest distance and use that as your base sphere. Most of the vertices will already be in that sphere.

During the second pass you iterate over all vertices and if a vertex is outside the sphere you re-calculate the sphere accounting for that vertex. This will result in a sphere with a new center and radius which are both easy to compute.

--8-- File 49
A stochastic algorithm proposed by Welzl tends to produce the most optimal sphere.

This is similar to Ritter's method, also using two passes, but instead of finding six initial vertices, you randomize the vertex list and choose a set of 2, 3 or 4 vertices to form the base sphere. 

The second pass is then the same as Ritter's method.

--9-- File 50
Merging two bounding spheres is trivial and only requires a little bit of vector math.

You can review the code here for an explanation but this is a simple exercise that you could intuitively and esily do on your own.

--10a-- File 52
Computing an OBB is significantly more complicated than computing a sphere or Axis-aligned bounding box. However, the benefits are worth it.  Oriented Bounding Boxes are versitile enough to be quite effective for collision detection, especially for moving and rotating objects, yet simple enough that collision computations aren't too expensive.

Computing an OBB for a 2-dimensional set of points is relatively trivial.  See Ericson's Real-time Collision Detection text for a thorough explanation. The 3-dimensional problem is another story.

A lot of research has gone into the computation of a 3D OBB given an arbitrary set of points. It turns out that the problem is also trivial if you have the convex hull of the points, but that is not always the case. 

--10b-- File 54
The main problem is finding suitable axes that produce a tight fit. It is possible to find the best fit, but the computational complexity is too high, and algorithms too complicated to be feasible soltions.  However, fast, near-optimal results can be achieved and I list some methods here.  

Eberly's approach uses a minimization technique that iterates over a set of vectors, usually starting with the principle x-, y-, and z-axes. The algorithm starts with an arbitrary point in the set and projects the points onto lines and gets a new vector from an offset point.  This process continues until the new vector and offset point are small. The vectors obtained from the process become the axes of the OBB. Then the rest of the data is easy to calculate. 

--10c-- File [[2]]
Ericson proposes several different methods, each one more effective than the previous, culminating in a very elegant solution using principle component analysis. This is similar to stastical regression. You end up with a matrix from which the eigen vectors are good candidates for one of the axes of the OBB. Once an axis is selected, you can then project the points onto a plane whose normal is that axis vector, and compute the 2-dimensional OBB and use those vectors as the remaining two for the 3-dimensional OBB.

Moller, Haines, and Hoffman present a simple approach using a k-DOP,  like an Axis-aligned bounding box, and choosing a line segment from two points on opposite sides of the k-DOP.  The remaining points are projected onto the line containing that segment, and the point farthest from the line is chosen as a third vertex in the triangle, the other two being the points for the line segment.  Then three OBBs are constructed, each one along one side of the triangle.  The OBB with the smallest volume is, of course, selected as the result.

--11-- File 58
All these lead us to efficient collision tests.  The goals of efficient collision tests are listed here.

Ideally, collision computations have trivial rejection or trivial acceptance cases. Also, we want to avoid any expensive trigonometric methods, if possible.  Reducing the dimensions of the problem usually leads to fasted calculations, so we try for that if possible. Preprocessing of any values should be computed and stored.

Finally, we will discuss groupings of nearby bounding volumes producing a bounding volume hierarchy.  With this we can take advantage of trivial rejection and acceptance cases on entire groups of objects.

--12-- File 59
Here is a diagram of a bounding volume hierarchy.  A classic example is a car with its wheels.  Each wheel could have its own bounding volume, but then the entire car would also have a bounding volume that encloses the car's chassis, and all four wheels. 

This concludes this video.

