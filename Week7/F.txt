--2--
In this video, we discuss fog and fractal geometry



--3--
Fog is a general term in computer graphics that describes various atmospheric effects such as fog, haze, smoke, mist, or pollution. The effect is that objects further away fade into the color of the fog. The effect is generated by blending the fog color with the object color based on distance of the object from the camera.

Fog can be an important feature in outdoor scenes and visualizations. It can be especially important for flight simulators. Fog also provides an important depth cue. It can aid in perceiving how far an object is from the viewer. Objects further away will be faded or blended more with the color of the fog.

Fog is not the same as attenuation, though they are sometimes confused. Attenuation lowers the intensity of light reaching surfaces and depends on the distance of the surface from the light source. Fog essentially lowers the intensity of light reflected from the object surfaces that reaches the viewer and depends on the distance of the object from the viewer. The light reflected from the object becomes blended with light being reflected from particles in the atmosphere, which also reach the viewer.

--4--
This is an image of a tool for testing different fog parameters using OpenGL. Although the legacy OpenGL fog functions have been deprecated, the simplicity and effectiveness of its implementation serves as good framework for your own work.

--5--
Here are the functions calls that set and rendered fog in OpenGL.

--6--
Legacy OpenGL had three different methods available for computing the fog factor based on input options. The easiest to use is a linear-based fog. Here, a start distance and an end distance are provided. The fog factor is 0 for distances less than the start distance and is 1 for distances greater than the end distance, where objects are assumed to be totally obscured by the fog. In-between the two distances, the fog factor varies linearly.

The other 2 fog factors use a fog density factor that is used within an exponential function or within an exponential squared function. These 2 types of fog generally give a better effect, but are somewhat harder to find the proper density factor to use.

Fog can be implemented within either the vertex or fragment shader, preferably wherever you are doing the lighting computations. Since the distance from the camera to the point where reflection is being computed is needed for the fog equation, all you need to do is compute the length of the vector V, which has already been generated and used within the shaders to compute specular reflection. You would then blend the color from the reflection equation with the color of the fog using the fog factor that was computed.

--7--
Fractal geometry describes repeating patterns that reduce in size. These types of patterns are seen in nature and can be used to created realistic, and just plain interesteing objects in computer graphics.

--8--
Benoit Mandelbrot, a polish-born, French-American mathemetician coined the term fractals. He did much research in regular patterns that are often observed naturally.  We use this term in computer graphics for objects that generally match this definition.

Fractals exhibit self-similarity. If you zoom in on fractals, you the same patterns, just on a smaller scale. 

Fractals also describe objects that are self-affine, meaning that they exhibit the same patterns but may be offset in different directions. 

--9--
A simple, classic fractal geometry example is the von Koch snowflake curve.

This 2D pattern simply replaces every line segment with four line segments. The original segment is divided into thirds with the middle replaced with two segments forming a regular triangle shape extending in the positive direction of the original segment.

This is repeated for every line segments until a desired level is reached, or subsequent levels would not contribute beyond a certain threshold.

--10--
Self-similarity is associated with the fractal dimension. If the shape is replaced by N parts, the fractal dimension is log-of-N divided by log-of-1-over-r, the scale of N in relation to the original shape. 

It is easiest to understand this using the example of the von Koch snowflake. The snowflake pattern begins as a line segment, a 1-dimensional shape. Each fractal step extends the line segments beyond this single dimension, but not exactly orthogonal, as the triangle shape only puts a bump on the segment. The line segment is broken replaced by 4 parts, and each major part is only one-third of the original segment.  The fractal dimension is log(4) over log(1/(1/3)) or log(4) over log(3), which evaluattes to approximately 1.26.

So you can see that the dimension is more than 1, but less than two.

You can extend this to 2 and 3 dimensions. A square can be divided into N parts, each being the square root of N in size.  A cube can be divided into N parts, each being the cubed-root of N in size.

--11--
Statistical self-similarity can be applied to non-regular shapes, like those seen in nature. Examples like coastlines and cloud look like they exhibit strong fractal rules, but only on a larger scale, not as an exact repeating pattern.

You can determine the fractal dimension by taking samples of the extended pattern and taking the average.

A coastline typically has a fractal dimension between 1.15 and 1.25, and terrain typically has a fractal dimension between 2.15 and 2.25

--12--
Julia and Mandelbrot sets are famous examples of fractal geometry because of their repeated, yet bizarre patterns.

Julia discovered this pattern in the early 1900s, but research effectively halted until Mandlebrot's research in the 1980s coupled with the computer graphics ability to visualize it.

The fractal pattern is that x becomes x-squared plus c, where x is a complex number.  'a' and 'b' are dimensions in the complex number space, and the modulus is the distance of the complex coordinate from the origin. The repeated squaring will converge to 0, 1, or infinity depending on if the modulus greater than, less than, or equal to one. 

The slide at the beginning of the fractal section of this video shows a mandelbrot set.

--13--
Fractals and fractal concepts are used to model natural phenomena like clouds, water, trees, and so forth, and can also be used to create terrain.

Fractal sampling patterns can be applied to a noise function to create deterministic, yet natural-looking objects. You can use brownian motion, a random walk, to introduce some randomness to fractal patterns to create more natural looking objects.  This is often applied to terrain generations.

Fractal concepts have even been used in music to generate or alter sound.

--14--
This is an image of a plant object created using a shape grammar rules.

--15--
A sphape grammar, or L-system, is a structure based on a set of rules, that can be applied to plant-like models for use in computer graphics.  I haven't seen too many resources for this type of modeling, and most text books omit it entirely.  Often this technique is mentioned along with other fractal geometry techniques.

The basic concept is to take a basic shape, and add layers that extend on the branches of the initial shapes, then repeat this pattern until a desired shape is achieved.

Fractal patterns, like trees, leaves, snowflakes, etc., can be defined by a set of L-system rules.



This concludes this video.