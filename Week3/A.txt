--2--
In this video we will discuss some techniques to improve the efficiency of our ray tracer.

--3--
We will discuss a number of efficiency techniques, including bounding volume usage to increase improve our intersection tests, adaptive depth control, light buffers to improve shadow efficiency, and a few spatial coherence methods

--4--
Since so much of our ray tracing is spent testing for intersections with objects, using ray to bounding volume intersection tests is one of the greatest enhancements we can make for efficiency. However, if we are not careful, we can negate any gains.

We must be sure to make our algorithms as fast a possible. We must also be sure to bound our objects as tightly as possibly.

We will be using spheres and axis-aligned bounding boxes to enclose our objects, but more advanced applications may require the use of additional bounding volumes to ensure maximum efficiency.

--5--
These bounding volume tests can be done in either local coordinates, or world coordinates. Since we already discussed transforming the ray into an object's local coordinates, storing our bounding volumes in local coordinates might be the best option.

There are some advantages to storing our bounding volumes in world coordinates. One advantage is that this negates the need to transform the ray into local coordinates if no intersection occurs with the bounding volume in world coordinates. However, it is usually easier to tightly fit an object into an axis-aligned bounding box in local coordinates than world coordinates.

--6--
There are some methods to improve the efficiency to find the first intersection for each ray originating from the camera. These are called first hit speedup methods.

The first method is to pre-render the scene using a modified depth buffer algorithm. This eliminates the need to find the ray's first intersection.

Another method is discussed in Hill's text using projection extents. This method projects each object onto the view plane and stores a two dimensional axis-aligned bounding box for each object. Each ray can then test against this 2D bounding volume before performing the more expensive 3D bounding volume check.

--7--
In the last module, we discussed having a maximum depth for the number of recursive calls we make to the ray tracer for each pixel. A more efficient method can check the contribution each recursive ray tracing call would make an only make the call if the contribution is above some threshold.  This can be done independently for reflective and refracted rays, and can also include a maximum depth.

--8--
Light buffers are a technique to improve the efficiency of testing whether or not an intersection point is in direct view of a light source. To do this, you construct six faces around a light source in the shape of a cube with each face, forming a grid. You can then project all objects in the scene onto each face to determine whether or not it is in full view of the light source at each grid cell. Each cell will have a list of polygons that can be seen from the light source.

Rays from the objects to light sources can then test against only the list of objects registered in the cell that the ray intersects on its path to the light source.

--9--
Refer to the diagram on the slide. As you can see a light source has a box around it with grids cells on each face. Each cell would register the objects that can be seen from the light source through that cell.

When you get an intersection point, determine the appropriate light buffer cellm then test for intersections against the objects registered for that cell.

--10--
A very simple optimization called shadow caching simply stores the most recent object, intersected by a shadow feeler for a given light source. The theory behind us is that subsequent rays originate from points that are relatively close together, and that there is a high probability that a ray will intersect the same object as the previous ray.

The technique is simple. If a given light source has a value for the previously cashed object, then the next ray will test against that object first. If there is no intersection, then it proceeds normally.

--11--
For the last part of this video, we will discuss spatial partitioning.

Spatial partitioning is a concept in which the entire scene or parts of the scene are represented in a data structure that groups objects by proxity. Typically a spatial partition is represented as a tree, where nodes and sub-trees are separated by bounding volumes or bounding planes. Objects that are close together in the scene are close together in the data structure.

For our purposes a ray can determine which parts of the scene it will intersect and only consider those objects registered with parts of the special partition.

--12--
A simple approach would be to just divide the scene up into even sections and register objects intersect with a given section. This approach is simple and relatively efficient.

There are better ways to do this, of course, but with optimization comes increased complexity and computational costs.

--13--
We will discuss special partitioning in greater depth in module 5, but I have listed few notes here for your consideration. The most commonly used structures are octtrees, and by special partition trees.

For collision detection, I have used what is called a loose-octree where the entire scene is divided up evenly but contiguous sections overlap to account for moving objects that may intersect more that one cell at a time.

To improve the intersection of a ray with a complex mesh object, I have found a K-D tree to be very effective, but we will discuss that later in the course.


This concludes this video.
