--2--
Here we will discuss how to implement reflections in real-time application.

Even though reflections serve a very different purpose than shadows, the techniques for implementing them are so similar that it makes sense to talk about them at the same time.

--3--
This is a simple example of a reflection in real time you can see the model perfectly reflected on the floor plane.

--4--
Accurate reflecting surfaces is a signature trait in ray tracing applications, but is not so easily implemented in real-time applications, particulary because some global knowledge of the scene must be known at the polygon level. However, there are a few tricks that allow us to perform reflections is real time. The two main features that we need to for real time reflections are planar reflections and environment maps.

First, we must classify the objects in our scene as either relfectors or reflected objects. A reflector is like a mirror, reflecting light that is in direct line of sight; you don't see the mirror itself in the reflected image.

--5--
A planar reflection is the same process for reflections that we did in ray tracing. We need the camera position, the normal to the surface, and the intersection point. All this is already available to us, and then we can easily get the angle of incedence and relected angle, from which we can derive the reflected ray.

--6--
We can derive the planar reflection matrix using the point on the reflecting plane and the surface normal vector. The principal behind this is to translate the reflecting plane to pass through the origin and we rotate the normal on the reflecting plane to align with the z-axis.

If the reflection plane is the ground plane, then this matrix is quite simple. The formula for the general case is shown here.

--7--
Given the reflection matrix, we can render the geometry in the scene that will get projected onto the reflecting surface. Then we can draw the rest of the scene normally, blending the relfected surface fragments with the reflected image.

--8--
You may have noticed that there is no clipping to the reflected surface which means that we may draw objects that aren't really on the surface. A potential solution to this is to use the stencil buffer and only allow drawing to pixels that represent the reflected surface.

Also, we need to be sure to only render objects that are in front of the reflected surface. 

We can account for all of this but, there is a better solution.

--9--
Since we now know about framebuffer objects, and rendering to a textture memory, we can actually render the scene from the point of view of the reflective surface and store that result as a texture map, then use that in a subsequent rendering pass to texture the reflected surface. This is discussed in detail in the next module.

This concludes this video.

