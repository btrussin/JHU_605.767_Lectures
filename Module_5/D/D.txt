5D: View Frustum Culling

https://www.gamedevs.org/uploads/fast-extraction-viewing-frustum-planes-from-world-view-projection-matrix.pdf [Fast Extraction of Viewing Frustum Planes from World-View-Projection Matrix]

--2-- File 53
In this video, we discuss view frustum culling and some intersection tests needed to implement it.

--3-- File 54
Given we have already constructed a bounding volume hierachy for our scene, or at least have wrapped our geometric objects in bounding volumes, we can quickly determine if they are inside of our clip space by consctructing a view frustum object that matches the clip space in world coordinates and testing whether or not our objects are inside of it.

This works well if each of our objects has a bounding volume associated with it, but works even better with a BV hierarchy by testing against groups of objects. If a group is entirely inside the view frustum, we can draw the entire group knowing that every enclosed object is in view. Conversely, if the group is entirely outside, we can skip their draw calls knowing the entire group will get clipped. If the group's bounding volume intersects one or more of the sides of the frustum, we continue to test the children.

--4-- File 56
The full test for each bounding volume is called the exclusion/inclusion/intersection test. 

While testing for intersections, it is best to err on the side of inclusion. Our applications do rather well with no view-frustum culling whatsoever, which indicates that relying on pipeline clipping is often good enough. And too many detailed collision tests could impact performance with a large number of objects.

The text discusses methods of intersecting various bounding volumes with a frustum.  A common, generic method is known as the sweep method. This extends the frustum by another volume, creating a swept volume. With this swept volume, you can simply test it against points. See the image on the next slide.

--5-- File 58
This is taken from the textbook and shows a sphere-swept line segment and sphere-swept square.

You don't necessarily store the swept volume, you just use the concept of it for intersection tests.

Ericson's Real-Time Collision Detection text is an excellent resource for this method.

--6-- File 61
The view frustum intersection method proceeds as follows. Store the scene with a hierarchy of bounding volumes. Compute the view frustum representing the clip space and update it every frame. Test every node of the bounding volume hierarchy to determine whether or not it should be drawn as discussed previously.

If any node is totally inside the frustum, it and all child nodes can be marked to be drawn.  If any node is totally outside of the frustum, it and all child nodes can be marked to be not drawn.  And any bounding volume that intersects the frustum will be marked to be drawn if it is a leaf node, otherwise the graph will continue to traverse its child nodes.

--7-- File 66
The view frustum is stored as 6 outward facing planes. The near and far planes of the frustum can use the view-plane-normal and its reverse as the near plane normal and far plane normal respectively. The plane equations can be derived from the normal and a point from the View-reference-point.

The other planes can be derived from 3 points on the near and far planes. You can find the corners of the near and far planes that intersect the remaining planes using linear combinations of the view-right, view-up, and view-plane-normal vectors, and W and H, the width and height of the near plane or far plane derived from the field-of-view angle and aspect ratio.

For example, the top left corner point of the near plane is the VRP minus the view-plane-normal times n, the near distance, minus the view-right vector times W plus the view-up vector times H.

Just remember to choose the appropriate three points for the remaining planes such that the planes are oriented outwards.

--8-- File 67
The view frustum must be updated every time the camera is updated, so a fast way to do this is helpful.  The text briefly discusses a method proposed by Gribb and Hartmann.

The approach uses the view-projection matrix, the unit cube of the clip space, and perspective-correct projection.  The plane equations can be derived using different linear row combinations of the view-projection matrix.

--9-- File 68
In the implementation of this method, referenced here, the planes of the frustum are oriented inwards, so if you attempt to implement it yourself, be careful how you use the formulas and code snippets in the link.

--10-- File 69
To determine if a sphere intersects the view frustum, you can loop over the 6 planes and determine the distance of the sphere from each plane. 

If the frustum is symmetric about the view direction, which has been the case for our applications, then the algorithm can be simplified somewhat, but not significantly.

--11-- File 71
Testing a frustum against a box is more complex. A simple inside test is that all extreme points of the box are inside the frustum, and a simple outside test is that all extreme points of the box are outside one of the planes of the frustum.

Where this gets more difficult is if the box lies in a corner region and is close enough to the frustum to not be completely outside of any one plane. See the image to the right.

A better, more robust test uses the separating axis theorem.

--12-- File 75
To test a box/plane intersection you can simply test the extreme points of the box against the plane.  If any two of the points are on opposite sides of the plane, then you have an intersection.

Keep in mind that we only store two of the extreme points for an axis-aligned bounding box, and none of the extreme points for an oriented bounding box, so these points must be derived for these tests.

The text describes a faster method where instead of testing all 8 box points, only the two points closest and farthest from the plane need to be tested. The closest and farthest points can be determined by computing the box's diagonals and the diagonal whose dot product with the plane's normal is the largest is selected.

--13-- File 76
A fast test of an axis-aligned box and a plane is to project the box center onto the plane normal, and project the eight half diagonals of the box onto the plane normal as well.

The largest half-diagonal projection value becomes the value we can use to perform the test as shown on this slide.  Simple comparisons will determine if the AABB is above, below, or intersects the plane.

--14-- File 78
A similar test of an OBB can be accomplished using the half diagonal method.

--15-- File 80
An easy optimization to frustum intersection tests stores the last known plane index of the frustum that determined the object is completely outside and tests against that plane first for the next frame. This usually means that the early-out case is determined as early as possible.


This concludes this video.
