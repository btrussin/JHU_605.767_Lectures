9C: Advanced Texturing

http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/multi-texture/ [Multi-texturing]

--2-- File 48
Now we begin discussing advanced methods for using texture maps.  This video is just a brief introduction to the techniques we will cover as well as explanations of multipass rendering and multitexturing.

--3-- File 50
These are the texturing topics we will cover: material mapping, bump mapping, environment mapping, light mapping, image-based effects, and precedural texturing in shaders.

Each of these will be its own video, most of them relatively short.

--4-- File 52
I believe that very few graphics applications anymore render their scenes in a single rendering pass. The reasons for this are many, including complex or optimized lighting that may need more than one pass, some post-processing step on the output image for the frame, and so on.

The Quake III video games used up to 10 passes per frame, performing various functions per pass or adding different lighting or atmospheric effects.

This sounds like a high number to me, but not unreasonable.

--5-- File 53
With a single rendering pass, the framebuffer gets populated with a single color per pixel, which may have another fragment blended with it, or be overwritten by another incoming fragment color.

With multipass, you could do the same as with a single pass, but most likely you will be rendering to a different framebuffer object each time. A framebuffer object can be associated with some texture memory buffer, then bound and used as a texture in later passes.  You will see examples of this in later videos in this module.

--6-- File 56
With more advanced features and multipass rendering, it is likely that your application will need more than one shader program for each frame, and a scene graph node is a good way to manage this.

A shader node could create, compile and link shader programs and hold all the pertinent information.  The draw call could simply call glUseProgram before iterating through its children.

It it best to have shader nodes near the root, probably as direct children, as switching from one shader program to another is expensive.

Each shader will have different addresses for uniform variables and possibly different addresses for vertex attributes, so you will need to figure out a way to properly handle that in your application.

--7-- File 57
Multi-texturing allows more than one texture memory buffer to be accessed at a time during rendering. This allows for features like bump mapping in the fragment shader.  This can be a little tricky to setup, so I suggest you find some examples before attempting this.

Remember that texture access requires binding textures and activating texture channels in order to access them in the shader programs.

--8-- File 58
Here is a good, simple example of setting up and accessing multiple textures in the fragment shader.  If you are unsure how to do this, I recommend reviewing the linked tutorial.

This concludes this video.
