--2--

Welcome to Applied Computer Graphics, course 605.767. My name is Brian Russin. You can call Professor Russin, Mister Russin, or just simply Brian, whatever you prefer. 

This course extends course 605.667, covering intermediate and advanced topics. 

--3--
In Module 1 we will discuss the outline of the course, including what you should expect from me, and what I expect from you. Also, we will not waste time and jump right into some topics that extend what you learned in the basic course.

After I introduce the course, we will discuss picking, bounding volumes, and ray intersection methods. All these are needed before we just into Ray Tracing in Module 2.

--4-- 
This image is from a previous student. You will notice that it has multiple features that we only mentioned in the previous course, and you may be surprised to learn that you will be able to produce images like this by week 4 of this course.

--5-- 
We will cover a variety of topics, some of which are listed on this slide. The coursework may appear lighter than the basic course, consisting of only 2 programming assignments and a final project, but do not underestimate the time it may take you to implement some of the required features. When I took this class many years ago, I think I spent more time collectively on these assignments than the basic course.

--6--
We will using the Real-Time Rendering book, fourth edition, which is quickly becoming a classic.  If you happen to have the third edition, you will probably be fine. The third edition has a much nicer binding than the fourth edition, but the fourth edition makes quite a few additions and improvements over the third edition. This is one of my favorite books, by the way.  It does not focus on a graphics library and only contains pseudocode (and very little at that), which makes this resource applicable to all graphics environments.

Listed here are a few other resources that I may reference.  These are not required, but if you happen to find any of these, or others at a good price, you may want to start building library for yourself, especially if you intend to continue studies or work in computer graphics.

I also published a list of book that I have found helpful in my career in the Course Information module, if you are interested.  I put it together for the Computer Gaming Engines class, so it applies more to game programming than anything else.

--7--
I provide a code base that is from the previous class, which has plenty of utility classes for loading textures, compiling shaders, building scene graphs, and so forth.  I am somewhat flexible with the platform you prefer. The code has projects for Visual Studio and XCode, as well as a CMake file for use in any environment that supports CMake, C++ and the required dependencies (OpenGL, SDL, etc.).

I recommend you do the assignments of Windows, Mac, or Linux using any of the environments I just mentioned.  However, if you require or prefer a different environment, please reach out to me and we can see what we can arrange.

--8--
Your grade will depend on three projects. The first two are each worth 30% of your final grade. The final project will be worth 40%.

There are minimum criteria for the first two projects and the weight of each criterion will be stated in the project descriptions. The final project is of a more free-form nature, but includes a presentation.

--9-- 
The first assignment will be to create a ray tracer and render a scene that includes multiple features. This is a departure from the rendering pipeline approach we used in the previous course.

The second assignment returns to using scene-graphs, the rendering pipeline with OpenGL and programmable shaders. We will extend the scene graph to include some high-level optimizations and procedural modeling.

The Final assignment, like I mentioned, will be of your choosing, but will require a demonstration. I am not looking for an extensive write-up or a fancy presentation.  I will be grading mostly on your ability to implement some advanced features.  We will discuss details of the final project later in the course.

--10-- 
I am not too harsh grading the assignments. As a computer graphics class I am mostly looking for the implementation of algorithms and the correctness of the end result.

I may deduct points if your code does something very inefficiently, but probably not for anything like passing by value instead of passing by referenc.

Also, for any code or features that are incomplete, comments or descriptions will help me give you partial credit for your attempt.

--11-- 
These last few slides show examples of some past students' projects, just to get your mind thinking about what you might want to implement.

John White produced a outer-space theme using fractal terrain, particle systems, and a few other effects.

--12--
Brian Kohan gives some informative examples of the power of Catmull-Clark subdivision.

--13-- 
Here is another example of the same subdivision algorithm.  Notice how the two spiders use the same base model, but one has subdivision applied while the other does not.

--14--
Kunai Desai did a nice job implementing bump mapping.

--15--
Finally, this project by Ken Friece used extensive collision detection, handling and response.

This concludes this video.


